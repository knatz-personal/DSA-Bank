@model WebPortal.Models.AppointmentModel

@{
    ViewBag.Title = "Schedule Appointment";
}
<div id="scheduleformContainer" class="well  col-md-offset-3 col-md-6">
    @using (Html.BeginForm("Schedule", "Appointment", FormMethod.Post, new { id = "scheduleform" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <fieldset>
                <legend>Schedule an appointment with the manager</legend>
                <div id="infoAlert" class="alert alert-success collapse" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true"><i class=" glyphicon glyphicon-remove"></i></span>
                    </button>
                    <p id="successMessage"></p>
                </div>
                @if (ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Any())
                {
                    <div class="alert alert-danger" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true"><i class=" glyphicon glyphicon-remove"></i></span>
                        </button>
                        @Html.ValidationSummary(true, "Errors: ")
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.SuggestedDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.SuggestedDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SuggestedDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SuggestedTime, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.SuggestedTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SuggestedTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.Duration, Model.DurationValues, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { rows = 15, @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-3 col-md-7">
                        <input id="bttnSchedule" type="submit" value="Schedule" class="btn btn-lg btn-warning btn-block" />
                    </div>
                </div>
            </fieldset>
        </div>
    }
</div>
<script>
    var SCHEDULER = {
        Process: function() {
            $("#scheduleform").on("submit", function (ev) {
                ev.preventDefault();
                var data = $(this).serialize();
                $.post("@Url.Action("Schedule", "Appointment")", data).done(function (response) {
                    if (response.result !== "undefined" && response.Result === "OK") {
                        $("#successMessage").html(response.Message);
                        $("#infoAlert").show();
                        $('#scheduleform')[0].reset();
                    } else {
                        $.validator.unobtrusive.parse("#scheduleform");
                    }
                });
            });
        },
        Date: function() {
            $(".date").datetimepicker({
                format: 'DD/MM/YYYY',
                daysOfWeekDisabled: [0, 6]
            });
        },
        Time: function() {
            $(".time").datetimepicker({
                format: 'LT',
                minDate: moment({ hour: 8, minute: 00 }),
                maxDate: moment({ hour: 18, minute: 00 })
            });
        },
        Init: function() {
            this.Date();
            this.Time();
            this.Process();
        }
    };
    $(function() {
        SCHEDULER.Init();
    });
</script>