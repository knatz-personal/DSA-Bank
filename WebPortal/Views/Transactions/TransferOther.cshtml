@model WebPortal.Models.TransferOtherModel

@{
    ViewBag.Title = "Local Transfer";
    Model.TypeID = 3;
}

<div class="container body-content">
    @Html.ActionLink("View Transaction History", "Index", "Transactions", new { @class = "text-info col-md-offset-7 col-md-2 text-right" })
    @if (!Model.MyAccounts.Any())
    {
        <div class="well col-md-offset-3 col-md-6">
            <div id="editAlert" class="alert alert-danger" role="alert">
                <button type="button" class="close" aria-label="Close">
                    <span aria-hidden="true"><i class=" glyphicon glyphicon-exclamation-sign"></i></span>
                </button>
                Insufficient accounts. You must have at least 1 online bank account to use this feature.
                You can create one @Html.ActionLink("here", "Create", "Accounts")
            </div>
        </div>
    }
    else
    {
        using (Html.BeginForm("TransferOther", "Transactions", FormMethod.Post, new { id = "transferform" }))
        {
            @Html.AntiForgeryToken()
            <div class="well col-md-offset-3 col-md-6">
                <div class="form-horizontal">
                    <fieldset>
                        <div id="infoAlert" class="alert alert-success collapse" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true"><i class=" glyphicon glyphicon-remove"></i></span>
                            </button>
                            <p id="successMessage"></p>
                        </div>
                        @if (ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Any())
                        {
                            <div id="editAlert" class="alert alert-danger" data-dismiss="alert" role="alert">
                                <button type="button" class="close" aria-label="Close">
                                    <span aria-hidden="true"><i class=" glyphicon glyphicon-remove"></i></span>
                                </button>
                                @Html.ValidationSummary(true, "Error: ")
                            </div>
                        }
                        @Html.HiddenFor(d => d.TypeID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { rows = 15, @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AccountFromID, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.AccountFromID, Model.MyAccounts, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AccountFromID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AccountToID, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.AccountToID,new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AccountToID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.Currency, Model.Currencies, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-4 col-md-8">
                                <input type="submit" value="Submit" class="btn btn-warning btn-block" />
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>
        }
    }
</div>
<script>
    var TRANSFER = {
        Process: function () {
            $("#transferform").on("submit", function (ev) {
                ev.preventDefault();
                var data = $(this).serialize();
                $.post("@Url.Action("TransferOther", "Transactions")", data).done(function (response) {
                    if (response.result !== "undefined" && response.Result === "OK") {
                        $("#successMessage").html(response.Message);
                        $("#infoAlert").show();
                        $('#transferform')[0].reset();
                    } else {
                        $.validator.unobtrusive.parse("#transferform");
                    }
                });
            });
        },
        Init: function () {
            this.Process();
        }
    };
    $(function () {
        TRANSFER.Init();
    });
</script>